{"name":"vim2hs ⦂ Vim → Haskell","tagline":"A collection of vimscripts for Haskell development","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Features\r\n--------\r\n\r\n* Written from scratch for clean and organized code, though some parts are\r\n  borrowed from existing vimscripts.\r\n* Highlights Haskell code in GitHub Flavored Markdown, and Literate Haskell\r\n  documents as Markdown.\r\n* Improved syntax highlighting including Haddock markup in comments,\r\n  support for HSP and many quasi-quotes such as jmacro, shqq, regex, sql,\r\n  string interpolation...\r\n* Liberal syntax highlighting for Cabal package descriptions, yielding less\r\n  false-positives for mistakes than other syntax files for Cabal.\r\n* Makes Vim aware of Haskell modules and imports allowing you to `gf` with\r\n  the cursor on a module to \"go\" to its source \"file\", etc.\r\n* Support for using HLint both as a compiler and a command, integrated into\r\n  the quickfix system in Vim.\r\n* Unicode conceals for various operators and syntax, such as lambda and\r\n  function composition.\r\n* Integrates with third-party plugins, but doesn't require them:\r\n  snippets for UltiSnips and patterns for Tabular.\r\n* Posts buffers and line-ranges to [hpaste.org](http://hpaste.org).\r\n* Highly configurable, most of the above can be disabled if it gets in the\r\n  way.\r\n\r\nInstallation\r\n------------\r\n\r\nYou need at least Vim 7.3, and for the HPaste command Python 2, not too\r\nancient.  Beyond that, just clone this repo and add it to your\r\n`'runtimepath'`.  [Vundle](https://github.com/gmarik/vundle) is great for\r\nautomating that, [Pathogen](https://github.com/tpope/vim-pathogen) is also\r\npopular.\r\n\r\nSee Also\r\n--------\r\n\r\nHere are some other Vimscripts that complement vim2hs nicely:\r\n\r\n* Omni completion: [neco-ghc](https://github.com/ujihisa/neco-ghc)\r\n* Syntax checking and linting:\r\n  [syntastic](https://github.com/scrooloose/syntastic)\r\n* Type inspection:\r\n  [haskellmode](https://github.com/lukerandall/haskellmode-vim) or (better)\r\n  [ghcmod](https://github.com/eagletmt/ghcmod-vim)\r\n* Shakespeare templates highlighting:\r\n  [html-template-syntax](https://github.com/pbrisbin/html-template-syntax)\r\n* Layout as text objects:\r\n  [textobj-indent](https://github.com/kana/vim-textobj-indent) *(vim2hs\r\n  includes a less powerful version of this that I wrote before I discovered\r\n  this Vimscript; it might be removed in favor of this one in the future)*\r\n\r\nOverview\r\n--------\r\n\r\n### Top-level Definitions\r\n\r\nThe syntax highlighting of top-level definitions are improved in vim2hs:\r\n\r\n![Bindings screenshot](https://github.com/dag/vim2hs/raw/master/screenshots/bindings.png)\r\n\r\nThis screenshot showcases a number of nice features:\r\n\r\n* Type signatures are highlighted as a whole, even if spanning multiple\r\n  lines.\r\n* In function definitions, the name of the function is highlighted\r\n  differently from its arguments, even if the equal sign is on another line\r\n  (most or all other syntax highlighters get this wrong).\r\n* Template Haskell declaration splices are highlighted as pre-processor\r\n  macros, without conflicting with the highlighting of function definitions\r\n  or data declarations etc (again, most others get this wrong)\r\n* Top-level definitions such as functions, classes and instances and data\r\n  declarations form folds, as you can see in the `foldcolumn` to the left\r\n  of the line numbers.  Closed folds are given a consistent `foldtext`\r\n  producing a nice overview of the code.  Type signatures are intentionally\r\n  not included in the folds, so as to allow you to read the type of folded\r\n  definitions.\r\n\r\nIn this screenshot, \"wide conceals\" are enabled, which is what makes the\r\ntype colons and function arrows display as unicode.  This option is\r\ndisabled by default, since it can mess up the visual alignment between\r\nlines.  To enable it like I have done here, try this:\r\n\r\n```vim\r\nlet g:haskell_conceal_wide = 1\r\n```\r\n\r\nOther options like this that are safer are enabled by default, and can be\r\ndisabled should you so desire:\r\n\r\n```vim\r\n\" disable all conceals, including the simple ones like\r\n\" lambda and composition\r\nlet g:haskell_conceal              = 0\r\n\r\n\" disable concealing of \"enumerations\": commatized lists like\r\n\" deriving clauses and LANGUAGE pragmas,\r\n\" otherwise collapsed into a single ellipsis\r\nlet g:haskell_conceal_enumerations = 0\r\n```\r\n\r\n### Quasi Quoting\r\n\r\nHaskell supports embedding arbitrary syntax that is processed at\r\ncompile-time.  Vim supports embedding external syntax highlighting.\r\n\r\n![Quasi Quotes screenshot](https://github.com/dag/vim2hs/raw/master/screenshots/quasi.png)\r\n\r\nThese are all enabled by default but you can selectively opt out by adding\r\nthe relevant configuration overrides to your `~/.vimrc`:\r\n\r\n```vim\r\nlet g:haskell_quasi         = 0\r\nlet g:haskell_interpolation = 0\r\nlet g:haskell_regex         = 0\r\nlet g:haskell_jmacro        = 0\r\nlet g:haskell_shqq          = 0\r\nlet g:haskell_sql           = 0\r\nlet g:haskell_json          = 0\r\nlet g:haskell_xml           = 0\r\n```\r\n\r\n### HSP & Heist\r\n\r\n[Haskell Server Pages](http://hackage.haskell.org/package/hsp) and\r\n[Haskell Source with XML](http://hackage.haskell.org/package/hsx)\r\npre-processes literal XML in Haskell source code into function application\r\nand vim2hs provides limited support for this syntax - I have yet to figure\r\nout how to highlight the body of XML elements differently while still\r\nhighlighting the attributes as Haskell.\r\n\r\n![HSP screenshot](https://github.com/dag/vim2hs/raw/master/screenshots/hsp.png)\r\n\r\nThis is enabled by default and can be disabled thusly:\r\n\r\n```vim\r\nlet g:haskell_hsp = 0\r\n```\r\n\r\n[Heist](http://hackage.haskell.org/package/heist) is a simple XML/HTML\r\ntemplating system; simple enough that you could simply use the `xml` or\r\n`html` filetype in Vim for these templates.  However, it includes a number\r\nof pre-defined \"splices\" and a special syntax for \"splice interpolation\" in\r\nattributes.  Included with vim2hs is a syntax file for Heist HTML templates\r\nand automatic filetype detection for `*.tpl` files.\r\n\r\n![Heist screenshot](https://github.com/dag/vim2hs/raw/master/screenshots/heist.png)\r\n\r\n### Strings\r\n\r\nHaskell actually supports multi-line strings by escaping the newline, but I\r\ndon't think it's a widely used feature and I think quasi quoting is better\r\nfor such purposes.  Thus I have opted to keep string literals from crossing\r\nlines so half your source file doesn't highlight as a string while you're\r\nentering one, and instead, string literals without a matching end quote\r\nhighlight as errors.\r\n\r\n![Strings screenshot](https://github.com/dag/vim2hs/raw/master/screenshots/strings.png)\r\n\r\nThere are currently no configuration options for this, but I might add one\r\nin the future if anyone is actually using the escaped newline syntax.\r\n\r\n### HLint\r\n\r\nHLint is provided as a compiler for Vim.\r\n\r\n```vim\r\n:compiler hlint\r\n:make\r\n```\r\n\r\nAs a convenience there's also a command that does the above and then resets\r\nthe compiler to its previous value.\r\n\r\n```vim\r\n:HLint\r\n```\r\n\r\nEither way any HLint suggestions and warnings will be put in Vim's quickfix\r\nlist and you can jump between them with `:cn` and `:cp`, although I\r\nrecommend setting up\r\n[FuzzyFinder](https://github.com/vim-scripts/FuzzyFinder) and using its\r\n`:FufQuickfix` command instead.\r\n\r\n### HPaste\r\n\r\nTo pastebin the contents of the current buffer do this:\r\n\r\n```vim\r\n:HPaste\r\n```\r\n\r\nThe newly created paste URL will be put in the `+` register, meaning your\r\nnormal desktop clipboard.\r\n\r\nAlternatively, you can select a range of lines with Vim's VISUAL modes and\r\ntype the same as above, which should result in this:\r\n\r\n```\r\n:'<,'>HPaste\r\n```\r\n\r\nWhich of course will paste the selected lines only.\r\n\r\nIf you get tired of entering your author name every time you can configure\r\nit globally like so:\r\n\r\n```vim\r\nlet g:hpaste_author = 'donri'\r\n```\r\n\r\n### UltiSnips\r\n\r\nIf you're using the excellent\r\n[UltiSnips](https://github.com/sirver/ultisnips) Vimscript, vim2hs provides\r\nsome useful snippets for Haskell programming.  You can list all active\r\nsnippets by hitting `Ctrl+Tab` in INPUT mode.\r\n\r\n### Tabular\r\n\r\nAnother useful Vimscript is\r\n[Tabular](https://github.com/godlygeek/tabular).  If it's installed, vim2hs\r\nadds some named patterns useful for maintaining layout in Haskell code.\r\nYou can list all named patterns by tab-completing after entering the\r\n`:Tabularize` command.  You probably want to configure some mappings or\r\ncommands for the ones you find useful.\r\n\r\nTo disable them, use this configuration:\r\n\r\n```vim\r\nlet g:haskell_tabular = 0\r\n```\r\n","google":""}