snippet pragma "Compiler pragma"
{-# $1 #-}
endsnippet

snippet lang "LANGUAGE pragma"
{-# LANGUAGE $1 #-}
endsnippet

snippet ghcopt "GHC options"
{-# OPTIONS_GHC $1 #-}
endsnippet

snippet preproc "Pre-processor"
{-# OPTIONS_GHC -F -pgmF ${1:preprocessor} #-}
endsnippet

snippet iq "Qualified module import"
import qualified ${1:module} as ${0:alias}
endsnippet

snippet data "Algebraic data type"
data ${1:type} ${2:variables} = ${3:constructor} | ${0:constructor}
endsnippet

snippet rec "Data record"
data ${1:type} ${2:variables}
	= $1
			{ ${3:field} :: ${4:type}
			}
endsnippet

snippet nt "Newtype"
newtype ${1:type} ${2:variables} = $1 ${3:oldtype}
endsnippet

snippet cls "Type class definition"
class ${1:name} where
	$0
endsnippet

snippet inst "Instance definition"
instance ${1:class} ${2:type} where
	$0
endsnippet

snippet def "Function definition / top-level value binding"
-- | ${1:documentation}
${2:name} :: ${3:type}
$2 ${4:args} = ${0:error "undefined: $2"}
endsnippet

snippet if "Boolean conditional"
if ${1:condition} then ${2:true} else ${3:false}
endsnippet

snippet case "Pattern match"
case ${1:scrutinee} of
	${2:pattern} -> ${3:expression}
endsnippet

snippet qq "Quasi quote"
[${1:quoter}| ${0:content} |]
endsnippet
